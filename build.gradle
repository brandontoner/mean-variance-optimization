plugins {
    id 'java'
    id 'checkstyle'
    id 'jacoco'
}

group 'com.brandontoner'
version '0.1'

repositories {
    mavenCentral()
}

sourceSets {
    jmh {
        java.srcDirs = ['src/jmh/java']
        resources.srcDirs = ['src/jmh/resources']
        compileClasspath += sourceSets.main.runtimeClasspath
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '--add-modules' << 'jdk.incubator.vector'
}

tasks.withType(JavaExec) {
    jvmArgs('--add-modules', 'jdk.incubator.vector')
}

dependencies {
    // Ion
    implementation 'software.amazon.ion:ion-java:1.5.1'
    // DI
    implementation 'javax.inject:javax.inject:1'
    implementation 'com.google.inject:guice:5.1.0'
    implementation 'com.google.guava:guava:31.1-jre'
    // Logging
    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    // Testing
    testImplementation(platform('org.junit:junit-bom:5.9.0'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    testImplementation('org.mockito:mockito-core:4.6.1')
    // JMH
    jmhImplementation 'org.openjdk.jmh:jmh-core:1.35'
    jmhAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.35'
}

test {
    jvmArgs('--add-modules', 'jdk.incubator.vector')
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacoco {
    toolVersion "0.8.8"
}

checkstyle {
    toolVersion '10.3.2'
}

task jmh(type: JavaExec, dependsOn: jmhClasses) {
    mainClass.set('org.openjdk.jmh.Main')
    classpath = sourceSets.jmh.compileClasspath + sourceSets.jmh.runtimeClasspath
}

classes.finalizedBy(jmhClasses)
